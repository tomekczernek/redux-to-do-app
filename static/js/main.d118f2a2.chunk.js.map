{"version":3,"sources":["api/index.js","task/redux.js","task/components/CheckBox.js","task/components/Input.js","task/components/TaskForm.js","task/components/Loader.js","task/container/TasksContainer.js","task/container/HeaderContainer.js","rootReducer.js","App.js","reportWebVitals.js","index.js"],"names":["request","method","endpoint","data","config","axios","url","process","headers","get","post","patch","delete","FETCH_TASKS_REQUESTED","FETCH_TASKS_SUCCEDED","FETCH_TASKS_FAILED","UPDATE_TASK_REQUESTED","UPDATE_TASK_SUCCEDED","UPDATE_TASK_FAILED","DELETE_TASK_REQUESTED","DELETE_TASK_SUCCEDED","DELETE_TASK_FAILED","CREATE_TASK_REQUESTED","CREATE_TASK_SUCCEDED","CREATE_TASK_FAILED","INITIAL_STATE","tasksList","isLoading","isError","openTaskForm","showDoneTasks","fetchTasks","dispatch","type","api","then","response","payload","catch","error","updateTask","id","updatedTasksList","map","item","updateTaskSucceded","deleteTask","filter","createTask","push","createTaskSucceded","TOGGLE_OPEN_TASK_FORM","toggleOpenForm","FETCH_TASKS_COMPLETED","connect","state","task","taskId","taskName","taskIsCompleted","TaskCheckBoxContainer","TaskCheckBox","onClick","FormData","append","styled","div","useState","name","setName","toggle","setToggle","handleSaveTask","event","preventDefault","stopPropagation","TaskNameContainer","TaskName","value","className","TaskNameInputContainer","TaskNameInput","onChange","target","onKeyDown","key","TaskActionContainer","TaskImageContainer","p","input","d","setTaskName","handleSaveTaskForm","FormContainer","ImageFormContainer","FormInput","Loader","LoaderContainer","LoaderMessage","useEffect","Container","TasksBody","TaskContainer","is_completed","props","fetchCompleted","HeaderBtn","HeaderTitle","HeaderBtnGear","length","rootReducer","combineReducers","action","AppContainer","AppBody","App","store","createStore","applyMiddleware","thunk","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d118f2a2.chunk.js","sourcesContent":["import axios from 'axios';\n\nfunction request(method, endpoint = '', data = null, config = null){\n\n    return axios({\n        method, \n        url: `${process.env.REACT_APP_API_URL}${endpoint}`,\n        data,\n        headers: config\n    });\n}\n\nfunction get(endpoint){\n    return request('GET', endpoint);\n}\n\nfunction post(endpoint, data){\n    return request('POST', endpoint, data, {'Content-Type':'multipart/form-data'});\n}\n\nfunction patch(endpoint, data){\n    return request('PATCH', endpoint, data);\n}\n\nfunction _delete(endpoint){\n    return request('DELETE', endpoint);\n}\n\nexport default {\n    get,\n    post,\n    patch,\n    delete: _delete\n};","import api from '../api';\r\n\r\nconst FETCH_TASKS_REQUESTED = \"task/FETCH_TASKS_REQUESTED\";\r\nconst FETCH_TASKS_SUCCEDED = \"task/FETCH_TASKS_SUCCEDED\";\r\nconst FETCH_TASKS_FAILED = \"task/FETCH_TASKS_FAILED\";\r\n\r\nconst UPDATE_TASK_REQUESTED = \"task/UPDATE_TASK_REQUESTED\";\r\nconst UPDATE_TASK_SUCCEDED = \"task/UPDATE_TASK_SUCCEDED\";\r\nconst UPDATE_TASK_FAILED = \"task/UPDATE_TASK_FAILED\";\r\n\r\nconst DELETE_TASK_REQUESTED = \"task/DELETE_TASK_REQUESTED\";\r\nconst DELETE_TASK_SUCCEDED = \"task/DELETE_TASK_SUCCEDED\";\r\nconst DELETE_TASK_FAILED = \"task/DELETE_TASK_FAILED\";\r\n\r\nconst CREATE_TASK_REQUESTED = \"task/CREATE_TASK_REQUESTED\";\r\nconst CREATE_TASK_SUCCEDED = \"task/CREATE_TASK_SUCCEDED\";\r\nconst CREATE_TASK_FAILED = \"task/CREATE_TASK_FAILED\";\r\n\r\nconst INITIAL_STATE = {\r\n  tasksList: [],\r\n  isLoading: false,\r\n  isError: false,\r\n  openTaskForm: false,\r\n  showDoneTasks: false\r\n};\r\n\r\nconst fetchTasksRequested = () => ({ type: FETCH_TASKS_REQUESTED });\r\nconst fetchTasksSucceded = data => ({ type: FETCH_TASKS_SUCCEDED, payload: data });\r\nconst fetchTasksFailed = () => ({ type: FETCH_TASKS_FAILED });\r\n\r\nexport const fetchTasks = () => {\r\n  return function (dispatch) {\r\n    dispatch(fetchTasksRequested());\r\n    api.get().then(response => {\r\n      dispatch(fetchTasksSucceded(response.data.data));\r\n    })\r\n      .catch(error => {\r\n        dispatch(fetchTasksFailed());\r\n      });\r\n  };\r\n};\r\n\r\nconst updateTaskRequested = () => ({ type: UPDATE_TASK_REQUESTED });\r\nconst updateTaskSucceded = data => ({ type: UPDATE_TASK_SUCCEDED, payload: data });\r\nconst updateTaskFailed = () => ({ type: UPDATE_TASK_FAILED });\r\n\r\nexport const updateTask = (id, data, tasksList) => {\r\n  return function (dispatch) {\r\n    dispatch(updateTaskRequested());\r\n    api.post(`/${id}`, data).then(response => {\r\n      const updatedTasksList = tasksList.map(item =>\r\n        item.id === id\r\n          ? response.data.data[0]\r\n          : item\r\n      );\r\n      dispatch(updateTaskSucceded(updatedTasksList));\r\n    })\r\n      .catch(error => {\r\n        dispatch(updateTaskFailed());\r\n      });\r\n  };\r\n};\r\n\r\nconst deleteTaskRequested = () => ({ type: DELETE_TASK_REQUESTED });\r\nconst deleteTaskSucceded = data => ({ type: DELETE_TASK_SUCCEDED, payload: data });\r\nconst deleteTaskFailed = () => ({ type: DELETE_TASK_FAILED });\r\n\r\nexport const deleteTask = (id, tasksList) => {\r\n  return function (dispatch) {\r\n    dispatch(deleteTaskRequested());\r\n    api.delete(`/${id}`).then(response => {\r\n      const updatedTasksList = tasksList.filter(item => item.id !== response.data.data.id);\r\n      dispatch(deleteTaskSucceded(updatedTasksList));\r\n    })\r\n      .catch(error => {\r\n        dispatch(deleteTaskFailed());\r\n      });\r\n  };\r\n};\r\n\r\nconst createTaskRequested = () => ({ type: CREATE_TASK_REQUESTED });\r\nconst createTaskSucceded = data => ({ type: CREATE_TASK_SUCCEDED, payload: data });\r\nconst createTaskFailed = () => ({ type: CREATE_TASK_FAILED });\r\n\r\nexport const createTask = (data, tasksList) => {\r\n  return function (dispatch) {\r\n    dispatch(createTaskRequested());\r\n    api.post(`/`, data).then(response => {\r\n      tasksList.push(response.data.data[0]);\r\n      dispatch(createTaskSucceded(tasksList));\r\n    })\r\n      .catch(error => {\r\n        dispatch(createTaskFailed());\r\n      });\r\n  };\r\n};\r\n\r\nconst TOGGLE_OPEN_TASK_FORM = \"task/TOGGLE_OPEN_TASK_FORM\";\r\n\r\nexport const toggleOpenForm = (data) => ({\r\n  type: TOGGLE_OPEN_TASK_FORM,\r\n  payload: data\r\n});\r\n\r\nconst TOGGLE_TASKS_COMPLETED = \"task/TOGGLE_TASKS_COMPLETED\";\r\n\r\nexport const toggleTasksCompeted = (data) => ({\r\n  type: TOGGLE_TASKS_COMPLETED,\r\n  payload: data\r\n});\r\n\r\nconst FETCH_TASKS_COMPLETED = \"task/FETCH_TASKS_COMPLETED\";\r\n\r\nexport const fetchCompleted = (tasksList) => ({\r\n  type: FETCH_TASKS_COMPLETED,\r\n  payload: tasksList.filter(item => item.is_completed === 1)\r\n});\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case FETCH_TASKS_REQUESTED:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        isError: false,\r\n        showDoneTasks: false\r\n      };\r\n    case FETCH_TASKS_SUCCEDED:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: false,\r\n        tasksList: action.payload,\r\n        showDoneTasks: false\r\n      };\r\n    case FETCH_TASKS_FAILED:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n        showDoneTasks: false\r\n      };\r\n    case UPDATE_TASK_REQUESTED:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        isError: false\r\n      };\r\n    case UPDATE_TASK_SUCCEDED:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: false,\r\n        tasksList: action.payload\r\n      };\r\n    case UPDATE_TASK_FAILED:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true\r\n      };\r\n    case DELETE_TASK_REQUESTED:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        isError: false\r\n      };\r\n    case DELETE_TASK_SUCCEDED:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: false,\r\n        tasksList: action.payload\r\n      };\r\n    case DELETE_TASK_FAILED:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true\r\n      };\r\n    case CREATE_TASK_REQUESTED:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        isError: false,\r\n      };\r\n    case CREATE_TASK_SUCCEDED:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: false,\r\n        tasksList: action.payload\r\n      };\r\n    case CREATE_TASK_FAILED:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true\r\n      };\r\n    case TOGGLE_OPEN_TASK_FORM:\r\n      return {\r\n        ...state,\r\n        openTaskForm: action.payload\r\n      };\r\n    case FETCH_TASKS_COMPLETED:\r\n      return {\r\n        ...state,\r\n        tasksList: action.payload,\r\n        showDoneTasks: true\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};","import PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { updateTask } from '../redux';\r\nimport { ImCheckboxUnchecked, ImCheckboxChecked } from 'react-icons/im';\r\n\r\nfunction CheckBox({ taskId, taskName, taskIsCompleted, tasksList, updateTask }) {\r\n\r\n    const toogleIsDoneTask = () => {\r\n\r\n        const data = new FormData();\r\n        data.append('id', taskId);\r\n        data.append('task', taskName);\r\n        data.append('is_completed', taskIsCompleted === 1 ? 0 : 1);\r\n\r\n        updateTask(taskId, data, tasksList);\r\n    };\r\n\r\n    return (\r\n        <TaskCheckBoxContainer>\r\n            <TaskCheckBox onClick={toogleIsDoneTask}>\r\n                {taskIsCompleted ? (\r\n                    <ImCheckboxChecked />\r\n                ) : (\r\n                    <ImCheckboxUnchecked />\r\n                )}\r\n            </TaskCheckBox>\r\n        </TaskCheckBoxContainer>\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        tasksList: state.task.tasksList,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        updateTask: (taskId, data, tasksList) => dispatch(updateTask(taskId, data, tasksList))\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CheckBox);\r\n\r\nCheckBox.propTypes = {\r\n    taskId: PropTypes.string.isRequired,\r\n    taskName: PropTypes.string.isRequired,\r\n    taskIsCompleted: PropTypes.number.isRequired,\r\n    tasksList: PropTypes.array.isRequired,\r\n    updateTask: PropTypes.func.isRequired\r\n};\r\n\r\nconst TaskCheckBoxContainer = styled.div`\r\n    width: 20%;\r\n    text-align: center;\r\n`;\r\n\r\nconst TaskCheckBox = styled.div`\r\n    cursor: pointer;\r\n`;","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { updateTask, deleteTask } from '../redux';\r\nimport { ImBin2, ImCheckmark } from 'react-icons/im';\r\n\r\nfunction Input({ taskId, taskName, taskIsCompleted, tasksList, updateTask, deleteTask }) {\r\n\r\n    const [name, setName] = useState(taskName);\r\n    const [toggle, setToggle] = useState(name ? true : false);\r\n\r\n    const handleChangeTaskName = (event) => {\r\n        setName(event.target.value);\r\n    };\r\n\r\n    const handleSaveTask = (event) => {\r\n        if (name) {\r\n            setToggle(true);\r\n        }\r\n\r\n        const data = new FormData();\r\n        data.append('id', taskId);\r\n        data.append('task', name);\r\n        data.append('is_completed', taskIsCompleted);\r\n\r\n        updateTask(taskId, data, tasksList);\r\n        setToggle(true);\r\n\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    };\r\n\r\n    const handleRemoveTask = () => {\r\n        deleteTask(taskId, tasksList);\r\n    };\r\n\r\n    return (\r\n        <TaskNameContainer>\r\n            {toggle ? (\r\n                <TaskName value={taskName} className={taskIsCompleted ? 'doneTask' : ''} onClick={() => { setToggle(false); }}>\r\n                    {name}\r\n                </TaskName>\r\n            ) : (\r\n                <TaskNameInputContainer>\r\n                    <TaskNameInput\r\n                        type=\"text\"\r\n                        value={name}\r\n                        onChange={handleChangeTaskName}\r\n                        onKeyDown={(event) => {\r\n                            if (event.key === 'Enter') {\r\n                                handleSaveTask(event);\r\n                            }\r\n                        }}\r\n                    />\r\n                    <TaskActionContainer>\r\n                        <TaskImageContainer>\r\n                            <ImCheckmark className=\"pointer\" onClick={handleSaveTask} />\r\n                        </TaskImageContainer>\r\n                        <TaskImageContainer>\r\n                            <ImBin2 className=\"pointer\" onClick={handleRemoveTask} />\r\n                        </TaskImageContainer>\r\n                    </TaskActionContainer>\r\n                </TaskNameInputContainer>\r\n            )}\r\n        </TaskNameContainer>\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        tasksList: state.task.tasksList,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        updateTask: (taskId, data, tasksList) => dispatch(updateTask(taskId, data, tasksList)),\r\n        deleteTask: (taskId, tasksList) => dispatch(deleteTask(taskId, tasksList)),\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Input);\r\n\r\nInput.propTypes = {\r\n    taskId: PropTypes.string.isRequired,\r\n    taskName: PropTypes.string.isRequired,\r\n    taskIsCompleted: PropTypes.number.isRequired,\r\n    tasksList: PropTypes.array.isRequired,\r\n    updateTask: PropTypes.func.isRequired,\r\n    deleteTask: PropTypes.func.isRequired\r\n};\r\n\r\nconst TaskNameContainer = styled.div`\r\n    width: 80%;\r\n    text-align: left;\r\n`;\r\n\r\nconst TaskName = styled.p`  \r\n    padding: 0.5rem;\r\n    margin: 0.5rem 0;\r\n    font-size: 1.25rem;\r\n    cursor: pointer;\r\n    transition: 0.25s;\r\n`;\r\n\r\nconst TaskNameInputContainer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nconst TaskNameInput = styled.input`\r\n    border: solid 2px black;\r\n    border-radius: 5px;\r\n    font-size: 1.25rem;\r\n    padding: 0.5rem;\r\n    margin: 0.5rem 0;\r\n    width: calc(60% - 1rem);\r\n`;\r\n\r\nconst TaskActionContainer = styled.div`\r\n    display: flex;\r\n    width: 40%;\r\n    align-items: center;\r\n    justify-content: space-evenly;\r\n`;\r\n\r\nconst TaskImageContainer = styled.div`\r\n    /* border: solid 2px black;\r\n    border-radius: 5px; */\r\n    padding: 6px 12px;\r\n    cursor: pointer;\r\n    transition: 0.1s;\r\n    /* &:hover{\r\n        background-color: black;\r\n        color: white;\r\n        border-color: transparent;\r\n    } */\r\n`;\r\n\r\n\r\n","import { Fragment, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { createTask, toggleOpenForm } from '../redux';\r\nimport { ImCheckmark, ImMinus } from 'react-icons/im';\r\n\r\nfunction TaskForm({ tasksList, openTaskForm, createTask, toggleOpenForm }) {\r\n\r\n    const [taskName, setTaskName] = useState('');\r\n\r\n    const handleChangeTaskName = (event) => {\r\n        setTaskName(event.target.value);\r\n    };\r\n\r\n    const handleSaveTaskForm = (event) => {\r\n\r\n        if (taskName) {\r\n            const data = new FormData();\r\n            data.append('id', '');\r\n            data.append('task', taskName);\r\n            data.append('is_completed', 0);\r\n\r\n            createTask(data, tasksList);\r\n            setTaskName('');\r\n        }\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            {openTaskForm &&\r\n                <FormContainer>\r\n                    <ImageFormContainer>\r\n                        <ImMinus className=\"pointer\" onClick={() => toggleOpenForm(false)} />\r\n                    </ImageFormContainer>\r\n                    <FormInput\r\n                        type=\"text\"\r\n                        value={taskName}\r\n                        onChange={handleChangeTaskName}\r\n                        onKeyDown={(event) => {\r\n                            if (event.key === 'Enter') {\r\n                                handleSaveTaskForm(event);\r\n                            }\r\n                        }}\r\n                    />\r\n                    <ImageFormContainer>\r\n                        <ImCheckmark className=\"pointer\" onClick={handleSaveTaskForm} />\r\n                    </ImageFormContainer>\r\n                </FormContainer>\r\n            }\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        tasksList: state.task.tasksList,\r\n        openTaskForm: state.task.openTaskForm\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        createTask: (data, tasksList) => dispatch(createTask(data, tasksList)),\r\n        toggleOpenForm: (d) => dispatch(toggleOpenForm(d))\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TaskForm);\r\n\r\nTaskForm.propTypes = {\r\n    tasksList: PropTypes.array.isRequired,\r\n    openTaskForm: PropTypes.bool.isRequired,\r\n    createTask: PropTypes.func.isRequired,\r\n    toggleOpenForm: PropTypes.func.isRequired\r\n};\r\n\r\nconst FormContainer = styled.div`\r\n    background-color: #004080;\r\n    display: flex;\r\n    height: 80px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    width: 100%;\r\n    border-top: solid 2px white;\r\n    @media (max-width: 768px) {\r\n        height: 60px;\r\n    }\r\n`;\r\n\r\nconst FormInput = styled.input`\r\n    border: solid 2px white;\r\n    border-radius: 5px;\r\n    font-size: 1.25rem;\r\n    padding: 0.5rem;\r\n    margin: 1rem;\r\n    width: calc(60% - 2rem);\r\n`;\r\n\r\nconst ImageFormContainer = styled.div`\r\n    color: #fff;\r\n    border: solid 2px #fff;\r\n    border-radius: 5px; \r\n    padding: 0.5rem 1rem;\r\n    margin: 0.5rem 1rem;\r\n    cursor: pointer;\r\n    transition: 0.1s;\r\n    &:hover{\r\n        color: #004080;\r\n        background-color: #fff;\r\n        border-color: #004080;\r\n    }\r\n`;","import styled from 'styled-components';\r\n\r\nexport default function Loader() {\r\n    return (\r\n        <LoaderContainer>\r\n            <LoaderMessage>\r\n                Daj mi chwilę...\r\n            </LoaderMessage>\r\n        </LoaderContainer>\r\n    );\r\n}\r\n\r\nconst LoaderContainer = styled.div`\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    top: 0;\r\n    left: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    background-color: #004080;\r\n    opacity: 0.95;\r\n    z-index: 1;\r\n`;\r\n\r\nconst LoaderMessage = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: #FFF;\r\n    height: 100%;\r\n    z-index: 2;\r\n`;","import { Fragment, useEffect } from \"react\";\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport CheckBox from '../components/CheckBox';\r\nimport Input from '../components/Input';\r\nimport TaskForm from '../components/TaskForm';\r\nimport Loader from '../components/Loader';\r\nimport { fetchTasks } from '../redux';\r\n\r\nfunction TasksContainer({ tasksList, isLoading, isError, openTaskForm, fetchTasks }) {\r\n\r\n    useEffect(() => {\r\n        fetchTasks();\r\n    }, []);\r\n\r\n    return (\r\n        <Fragment>\r\n            {isLoading && <Loader />}\r\n            <Container>\r\n                {openTaskForm ? (\r\n                    <TaskForm />\r\n                ) : (\r\n                    null\r\n                )}\r\n                <TasksBody openTaskForm={openTaskForm}>\r\n                    {tasksList && tasksList.map(item => (\r\n                        <TaskContainer key={item.id} taskIsCompleted={item.is_completed}>\r\n                            <CheckBox taskId={item.id} taskName={item.task} taskIsCompleted={item.is_completed} />\r\n                            <Input taskId={item.id} taskName={item.task} taskIsCompleted={item.is_completed} />\r\n                        </TaskContainer>\r\n                    ))}\r\n                </TasksBody>\r\n            </Container>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        tasksList: state.task.tasksList,\r\n        isLoading: state.task.isLoading,\r\n        isError: state.task.isError,\r\n        openTaskForm: state.task.openTaskForm\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchTasks: () => dispatch(fetchTasks())\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TasksContainer);\r\n\r\nTasksContainer.propTypes = {\r\n    tasksList: PropTypes.array.isRequired,\r\n    isLoading: PropTypes.bool.isRequired,\r\n    isError: PropTypes.bool.isRequired,\r\n    openTaskForm: PropTypes.bool.isRequired,\r\n    fetchTasks: PropTypes.func.isRequired\r\n};\r\n\r\nconst Container = styled.div`\r\n    color: #000;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`;\r\n\r\nconst TasksBody = styled.div`\r\n    height: ${props => props.openTaskForm ? 'calc(100vh - 6rem - 80px - 82px)' : 'calc(100vh - 6rem - 80px )'};\r\n    width: 100%;\r\n    overflow-y: auto;\r\n    @media (max-width: 768px) {\r\n        height: ${props => props.openTaskForm ? 'calc(100vh - 2rem - 60px - 62px)' : 'calc(100vh - 2rem - 60px )'};\r\n    }\r\n`;\r\n\r\nconst TaskContainer = styled.div`\r\n    background-color: ${props => props.taskIsCompleted ? '#b3b3b3' : '#f2f2f2'};\r\n    transition: 0.25s;\r\n    display: flex;\r\n    align-items: center;\r\n    width: 100%;\r\n    border-top: 1px solid black;\r\n    &:last-child {\r\n        border-bottom-right-radius:5px;\r\n        border-bottom-left-radius:5px;\r\n    }\r\n    &:hover{\r\n        background-color: ${props => props.taskIsCompleted ? '#a6a6a6' : '#e6e6e6'};\r\n    }\r\n`;\r\n","import styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { fetchCompleted, toggleOpenForm, fetchTasks } from '../redux';\r\nimport { ImPlus, ImCog } from 'react-icons/im';\r\n\r\nfunction HeaderContainer({ tasksList, showDoneTasks, fetchCompleted, toggleOpenForm, fetchTasks }) {\r\n\r\n    const handleShowDoneTasks = () => {\r\n\r\n        if (showDoneTasks) {\r\n            fetchTasks();\r\n        }\r\n        else {\r\n            fetchCompleted(tasksList);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container tasksList={tasksList}>\r\n            <HeaderBtn onClick={() => toggleOpenForm(true)}>\r\n                <ImPlus />\r\n            </HeaderBtn>\r\n            <HeaderTitle>To-do-app</HeaderTitle>\r\n            <HeaderBtnGear showDoneTasks={showDoneTasks} >\r\n                <ImCog onClick={handleShowDoneTasks} />\r\n            </HeaderBtnGear>\r\n        </Container>\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        tasksList: state.task.tasksList,\r\n        showDoneTasks: state.task.showDoneTasks\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchCompleted: (data) => dispatch(fetchCompleted(data)),\r\n        toggleOpenForm: (data) => dispatch(toggleOpenForm(data)),\r\n        fetchTasks: () => dispatch(fetchTasks())\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(HeaderContainer);\r\n\r\nHeaderContainer.propTypes = {\r\n    tasksList: PropTypes.array.isRequired,\r\n    showDoneTasks: PropTypes.bool.isRequired,\r\n    fetchCompleted: PropTypes.func.isRequired,\r\n    toggleOpenForm: PropTypes.func.isRequired,\r\n    fetchTasks: PropTypes.func.isRequired\r\n};\r\n\r\nconst Container = styled.div`\r\n    background-color: #004080;\r\n    display: flex;\r\n    height: 80px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    border-top-right-radius: 5px;\r\n    border-top-left-radius: 5px;\r\n    border-bottom-left-radius: ${props => props.tasksList.length ? 'none' : '5px'};\r\n    border-bottom-right-radius: ${props => props.tasksList.length ? 'none' : '5px'};\r\n    @media (max-width: 768px) {\r\n        height: 60px;\r\n    }\r\n`;\r\n\r\nconst HeaderTitle = styled.p`\r\n    font-weight: bold;\r\n    font-size: 1.5rem;\r\n    @media (max-width: 768px) {\r\n        font-size: 1.25rem;\r\n    }\r\n`;\r\n\r\nconst HeaderBtn = styled.div`\r\n    color: #FFF;\r\n    border: solid 2px #FFF;\r\n    border-radius: 5px; \r\n    padding: 0.5rem 1rem;\r\n    margin: 0.5rem 1rem;\r\n    cursor: pointer;\r\n    transition: 0.1s;\r\n    &:hover{\r\n        color: #004080;\r\n        background-color: #FFF;\r\n        border-color: #004080;\r\n    }\r\n`;\r\n\r\nconst HeaderBtnGear = styled(HeaderBtn)`\r\n    color: ${props => props.showDoneTasks ? '#ff3399' : '#FFF'}; \r\n    border-color: ${props => props.showDoneTasks ? '#ff3399' : '#FFF'};\r\n    &:hover{\r\n        background-color: ${props => props.showDoneTasks ? '#ff3399' : '#FFF'};\r\n    }\r\n`;","import { combineReducers } from \"redux\";\r\nimport taskReducers from \"./task/redux\";\r\n\r\nconst rootReducer = combineReducers({\r\n  task: taskReducers\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from \"redux-thunk\";\nimport styled from 'styled-components';\n\nimport TasksContainer from './task/container/TasksContainer';\nimport HeaderContainer from './task/container/HeaderContainer';\nimport rootReducer from './rootReducer';\n\nfunction App() {\n\n  const store = createStore(rootReducer, applyMiddleware(thunk));\n\n  return (\n    <Provider store={store}>\n      <AppContainer>\n        <AppBody>\n          <HeaderContainer />\n          <TasksContainer />\n        </AppBody>\n      </AppContainer>\n    </Provider>\n  );\n}\n\nconst AppContainer = styled.div`\n  background-color: #282c34;\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  font-size: 1.25rem;\n  color: white;\n`;\n\nconst AppBody = styled.div`\n  width: 50vw;\n  margin: 3rem 0;\n  @media (max-width: 768px) {\n    width: 90vw;\n    margin: 1rem 0;\n    font-size: 1rem;\n  }\n`;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}